name: Test Upload

on:
  push:
    branches: 
      - main

jobs:
  build_latex:
    runs-on: ubuntu-latest
    if: github.actor == 'i-v-a-n-h-o-e'
    steps:
      - uses: actions/checkout@v3
      - run: mkdir -p output
      - run: ls -a
      - run: touch output/world.txt
      - run: echo "hello" > output/world.txt
      - run: cat main.tex > output/world.txt
      - uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: output/world.txt

      - name: Get current date and time in a specific time zone
        id: get_datetime_for_release
        uses: actions/github-script@v5
        with:
          script: |
            const timeZone = 'Asia/Yekaterinburg'; // Specify your desired time zone here
            const date = new Date();
            // Format the date part
            const yearFormatter = new Intl.DateTimeFormat('en-US', {
              timeZone: timeZone,
              year: 'numeric',
            });
            const monthFormatter = new Intl.DateTimeFormat('en-US', {
              timeZone: timeZone,
              month: '2-digit',
            });
            const dayFormatter = new Intl.DateTimeFormat('en-US', {
              timeZone: timeZone,
              day: '2-digit'
            });
            // Format the time part
            const timeFormatter = new Intl.DateTimeFormat('en-US', {
              timeZone: timeZone,
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit',
              hour12: false // Use 24-hour format
            });
            const formattedYear = yearFormatter.format(date).replace(/[/\s]/g, '-');
            const formattedMonth = monthFormatter.format(date).replace(/[/\s]/g, '-');
            const formattedDay = dayFormatter.format(date).replace(/[/\s]/g, '-');
            const formattedTime = timeFormatter.format(date).replace(/[:\s]/g, '-');
            const formattedDateTime = `${formattedYear}-${formattedMonth}-${formattedDay}__${formattedTime}`;
            return formattedDateTime;
      - run: echo "Release-${{ steps.get_datetime_for_release.outputs.result }}"

      - name: Get current date and time in a specific time zone
        id: get_datetime_for_output
        uses: actions/github-script@v5
        with:
          script: |
            const timeZone = 'Asia/Yekaterinburg'; // Specify your desired time zone here
            const date = new Date();
            // Format the date part
            const yearFormatter = new Intl.DateTimeFormat('en-US', {
              timeZone: timeZone,
              year: 'numeric',
            });
            const monthFormatter = new Intl.DateTimeFormat('en-US', {
              timeZone: timeZone,
              month: '2-digit',
            });
            const dayFormatter = new Intl.DateTimeFormat('en-US', {
              timeZone: timeZone,
              day: '2-digit'
            });
            // Format the time part
            const timeFormatter = new Intl.DateTimeFormat('en-US', {
              timeZone: timeZone,
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit',
              hour12: false // Use 24-hour format
            });
            const formattedYear = yearFormatter.format(date).replace(/[/\s]/g, '-');
            const formattedMonth = monthFormatter.format(date).replace(/[/\s]/g, '-');
            const formattedDay = dayFormatter.format(date).replace(/[/\s]/g, '-');
            const formattedTime = timeFormatter.format(date).replace(/[:\s]/g, '-');
            const formattedDateTime = `\[${formattedYear}-${formattedMonth}-${formattedDay}__${formattedTime}\]`;
            return formattedDateTime;
      - run: echo "Release-${{ steps.get_datetime_for_output.outputs.result }}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: Release-${{ steps.get_datetime_for_release.outputs.result }}
          release_name: Release ${{ steps.get_datetime_for_release.outputs.result }}
          draft: false
          prerelease: false
         
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/world.txt
          asset_name: world.txt #${{ steps.get_datetime_for_output.outputs.result }}
          asset_content_type: application/txt

      - name: Update README
        run: |
            RELEASE_URL=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.html_url')
            sed -i "s|https://github.com/i-v-a-n-h-o-e/LatexTest/releases/latest|$RELEASE_URL|g" README.md
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit -am "Update README with latest release URL"
            cat README.md
            git push https://${{ secrets.GH_TOKEN }}@github.com/i-v-a-n-h-o-e/LatexTest.git HEAD:main